---
- name: create_service - Get List of all Teams
  uri:
    method: GET
    url: "https://api.opsgenie.com/v2/teams"
    headers:
      Authorization: "GenieKey {{ api_key }}"
    return_content: yes
  register: team_id
  ignore_errors: true

- name: create_service - Extract team ID from existing team list
  set_fact:
    existing_teams: "{{ existing_teams|default([]) + [{ 'name': item.name, 'id': item.id}] }}"
  with_items: "{{ team_id.json.data }}"

- name: create_service - Get the lists of team names per list
  set_fact:
    teamlist_1: "{{ Services | map(attribute='team') | list }}"
    teamlist_2: "{{ existing_teams | map(attribute='name') | list }}"

- name: create_service - Get the names that exist in service but not in existing_teams
  set_fact:
    names_not_in_my_dict: "{{ teamlist_1 | difference(teamlist_2) }}"
    
- name: create_service - Merge the dictionaries when the name is matched
  set_fact:
    all: "{{ all|default([]) + [item[0] | combine(item[1])] }}"
  when: item[0].team == item[1].name
  loop: "{{ query('nested', Services, existing_teams) }}"

- name: create_service - Add all the teams elements that dont have entry in existing_teams
  set_fact:
    all: "{{ all + [item] }}"
  when: 
    - item.team not in names_not_in_my_dict
    - item.id is defined
  loop: "{{ Services }}"

- name: create_service - Get List of all Services
  uri:
    method: GET
    url: "https://api.opsgenie.com/v1/services"
    headers:
      Authorization: "GenieKey {{ api_key }}"
    return_content: yes
  register: existing_services
  ignore_errors: true

- name: create_service - Create a list of all existing services
  set_fact:
    existing_service_id: "{{ existing_services.json.data | map(attribute='id') | list }}"
    existing_service_name: "{{ existing_services.json.data | map(attribute='name') | list }}"

- name: create_service - Create service if it doesnt exist
  uri:
    method: POST
    url: https://api.opsgenie.com/v1/services
    headers:
      Content-Type: application/json
      Authorization: "GenieKey {{ api_key }}"
    body:
      teamId: "{{ item.id }}"
      name: "{{ item.svc_name }}"
      description: "{{ item.description|default(omit) }}"
      visability: "{{ item.visability|default(omit) }}"
    body_format: json
    return_content: true
    status_code: 200,400
  when:
    - item.svc_name not in existing_service_name
    - item.id not in existing_service_id
  with_items:
    "{{ all }}"
  register: service_created
  changed_when: service_created.status == 200